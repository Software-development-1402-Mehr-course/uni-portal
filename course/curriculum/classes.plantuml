@startuml classes
set namespaceSeparator none
class "abc.ABC" as abc.ABC #grey {
}
class "course.curriculum.bind.BindCourses" as course.curriculum.bind.BindCourses #77AADD {
  bind()
}
class "course.curriculum.token.StudentToken" as course.curriculum.token.StudentToken #77AADD {
  BASE_STUDENT_TOKENS : int
  tokens() -> int
}
class "course.curriculum.validators.ValidatorFacade" as course.curriculum.validators.ValidatorFacade #77AADD {
  student : Student
  validator
  propose_student_curriculum() -> list[Enrolment]
  reset_validator()
  student_valid_courses()
}
class "course.curriculum.validators.base_validator.AbstractValidator" as course.curriculum.validators.base_validator.AbstractValidator #77AADD {
  {abstract}add_course(course: Course) -> None
  {abstract}errors() -> list[ValidationError]
  {abstract}is_valid() -> bool
  {abstract}remove_course(course: Course) -> None
}
class "course.curriculum.validators.base_validator.AndValidator" as course.curriculum.validators.base_validator.AndValidator #77AADD {
  validators : tuple
  add_course(course: Course) -> None
  errors()
  is_valid() -> bool
  remove_course(course: Course) -> None
}
class "course.curriculum.validators.base_validator.BaseValidator" as course.curriculum.validators.base_validator.BaseValidator #77AADD {
}
class "course.curriculum.validators.base_validator.OrValidator" as course.curriculum.validators.base_validator.OrValidator #77AADD {
  seprator : str
  validators : tuple
  add_course(course: Course) -> None
  errors()
  is_valid() -> bool
  reduce_error_chain(chain: tuple[ValidationError]) -> Optional[ValidationError]
  remove_course(course: Course) -> None
  set_student(student: Student) -> None
}
class "course.curriculum.validators.credit_range_validator.MaxCreditValidator" as course.curriculum.validators.credit_range_validator.MaxCreditValidator #77AADD {
  credit_sum : int
  max_credit_sum : int
  add_course(course: Course) -> None
  errors()
  is_valid() -> bool
  remove_course(course: Course) -> None
}
class "course.curriculum.validators.error.ItemLevelError" as course.curriculum.validators.error.ItemLevelError #77AADD {
  item_id : int
  message : str
}
class "course.curriculum.validators.error.ListLevelError" as course.curriculum.validators.error.ListLevelError #77AADD {
  message : str
}
class "course.curriculum.validators.prerequisites_validator.PrerequisitesValidator" as course.curriculum.validators.prerequisites_validator.PrerequisitesValidator #77AADD {
  invalid_item_ids : set[int]
  student : Student
  add_course(course: Course) -> None
  errors()
  is_valid() -> bool
  remove_course(course: Course) -> None
}
course.curriculum.validators.base_validator.AbstractValidator --|> abc.ABC
course.curriculum.validators.base_validator.AndValidator --|> course.curriculum.validators.base_validator.BaseValidator
course.curriculum.validators.base_validator.BaseValidator --|> course.curriculum.validators.base_validator.AbstractValidator
course.curriculum.validators.base_validator.OrValidator --|> course.curriculum.validators.base_validator.BaseValidator
course.curriculum.validators.credit_range_validator.MaxCreditValidator --|> course.curriculum.validators.base_validator.BaseValidator
course.curriculum.validators.prerequisites_validator.PrerequisitesValidator --|> course.curriculum.validators.base_validator.BaseValidator
course.curriculum.validators.base_validator.AndValidator --* course.curriculum.validators.ValidatorFacade : validator
@enduml
