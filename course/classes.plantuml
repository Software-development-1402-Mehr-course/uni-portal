@startuml classes
set namespaceSeparator none
class "course.apps.CourseConfig" as course.apps.CourseConfig #77AADD {
  default_auto_field : str
  name : str
}
class "course.models.Course" as course.models.Course #77AADD {
  enrolment_cap : PositiveSmallIntegerField
  subject : ForeignKey
  teacher : ForeignKey
  picked(student: Student)
}
class "course.models.CourseSession" as course.models.CourseSession #77AADD {
  course : ForeignKey
  holds_even_weeks : BooleanField
  holds_odd_weeks : BooleanField
  time_slot
  weekday : IntegerField
}
class "course.models.CourseSubject" as course.models.CourseSubject #77AADD {
  credit : PositiveSmallIntegerField
  name : TextField
  prerequisites : ManyToManyField
}
class "course.models.Enrolment" as course.models.Enrolment #77AADD {
  course : ForeignKey
  priority : PositiveSmallIntegerField
  status : IntegerField
  student : ForeignKey
  tokens : PositiveSmallIntegerField
}
class "course.models.Meta" as course.models.Enrolment.Meta #99DDFF {
  unique_together : list
}
class "course.models.Status" as course.models.Enrolment.Status #99DDFF {
  name
}
class "course.models.Weekday" as course.models.CourseSession.Weekday #99DDFF {
  name
}
class "course.views.PickView" as course.views.PickView #77AADD {
  template_name : str
  get_context_data()
  picked_enrolments(student: Student)
  post(request)
  tokens(student: Student)
  valid_courses(validator: ValidatorFacade)
}
class "django.apps.config.AppConfig" as django.apps.config.AppConfig #44BB99 {
  apps : NoneType
  label
  models : NoneType
  models_module : NoneType
  module
  name
  path
  verbose_name
  create(entry)
  default_auto_field()
  get_model(model_name, require_ready)
  get_models(include_auto_created, include_swapped)
  import_models()
  {abstract}ready()
}
class "django.db.models.base.Model" as django.db.models.base.Model #BBCC33 {
  pk
  adelete(using, keep_parents)
  arefresh_from_db(using, fields)
  asave(force_insert, force_update, using, update_fields)
  check()
  {abstract}clean()
  clean_fields(exclude)
  date_error_message(lookup_type, field_name, unique_for)
  delete(using, keep_parents)
  from_db(db, field_names, values)
  full_clean(exclude, validate_unique, validate_constraints)
  get_constraints()
  get_deferred_fields()
  prepare_database_save(field)
  refresh_from_db(using, fields)
  save(force_insert, force_update, using, update_fields)
  save_base(raw, force_insert, force_update, using, update_fields)
  serializable_value(field_name)
  unique_error_message(model_class, unique_check)
  validate_constraints(exclude)
  validate_unique(exclude)
}
class "django.db.models.enums.IntegerChoices" as django.db.models.enums.IntegerChoices #BBCC33 {
  name
}
class "django.views.generic.base.TemplateView" as django.views.generic.base.TemplateView #AAAA00 {
  get(request)
}
course.apps.CourseConfig --|> django.apps.config.AppConfig
course.models.Course --|> django.db.models.base.Model
course.models.CourseSession --|> django.db.models.base.Model
course.models.CourseSession.Weekday --|> django.db.models.enums.IntegerChoices
course.models.CourseSubject --|> django.db.models.base.Model
course.models.Enrolment --|> django.db.models.base.Model
course.models.Enrolment.Status --|> django.db.models.enums.IntegerChoices
course.views.PickView --|> django.views.generic.base.TemplateView
django.db.models.enums.IntegerChoices --* course.models.CourseSession : time_slot
@enduml
